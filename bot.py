import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from dotenv import load_dotenv
import subprocess

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise ValueError("‚ùå TOKEN is missing! Check your .env file or environment settings.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
menu_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–¢–æ–≤–∞—Ä—ã')],
    [KeyboardButton(text='–£—Å–ª—É–≥–∏')],
    [KeyboardButton(text='–†–∞–±–æ—Ç—ã')],
    [KeyboardButton(text='–°—Ç–æ–ø üõë')]
], resize_keyboard=True)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
process_running = False

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command('start'))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=menu_kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
@dp.message()
async def handle_message(message: types.Message):
    global process_running

    text = message.text.lower()
    if text in ['—Ç–æ–≤–∞—Ä—ã', '—É—Å–ª—É–≥–∏', '—Ä–∞–±–æ—Ç—ã']:
        if process_running:
            await message.answer("‚öôÔ∏è –ü–∞—Ä—Å–µ—Ä —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–∂–¥–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ '–°—Ç–æ–ø üõë'.")
            return

        await message.answer(f"üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {text.capitalize()}")
        process_running = True

        try:
            # –ó–∞–ø—É—Å–∫ parser.py —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            subprocess.run(['python', 'parser.py', text], check=True)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞
            if os.path.exists('tenders.xlsx'):
                with open('tenders.xlsx', 'rb') as file:
                    await bot.send_document(message.chat.id, file)
                await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            else:
                await message.answer("‚ö†Ô∏è –§–∞–π–ª tenders.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–µ—Ä –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.")
        except subprocess.CalledProcessError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞:\n{e}")
        finally:
            process_running = False

    elif text == '—Å—Ç–æ–ø üõë':
        if process_running:
            process_running = False
            await message.answer("üõë –ü–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–§–∞–π–ª —Å —Ç–µ–∫—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:")
            if os.path.exists('tenders.xlsx'):
                with open('tenders.xlsx', 'rb') as file:
                    await bot.send_document(message.chat.id, file)
            else:
                await message.answer("‚ö†Ô∏è –§–∞–π–ª tenders.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await message.answer("‚ÑπÔ∏è –ü–∞—Ä—Å–µ—Ä —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω.")

    else:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–Ω–æ–ø–∫–∏.", reply_markup=menu_kb)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
